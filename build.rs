use avgcol::AverageColor;
use convert_case::{Case, Casing};
use std::fs;
use std::io::{Result, Write};

fn main() -> Result<()> {
    // create average.rs, a file which contains a phf::Map of the average colours of each block
    let mut enum_ = String::from(
        "#[derive(Debug, Clone, PartialEq, Eq, Hash, EnumIter)]
pub enum Blocks {
    Air,",
    );
    let mut into_rgb = String::from(
        "impl Into<Rgb> for Blocks {
    fn into(self) -> Rgb {
        match self {
            Blocks::Air => Rgb::new(0., 0., 0.),",
    );
    let mut asref_path = String::from(
        "impl AsRef<Path> for Blocks {
    fn as_ref(&self) -> &Path {
        match self {
            Blocks::Air => Path::new(\"air.png\"),",
    );

    for file in fs::read_dir("./assets/blocks")? {
        let file = file?;
        let bytes = fs::read(file.path())?;
        let avg = AverageColor::from_bytes(bytes).unwrap();
        let enum_entry = file
            .file_name()
            .to_str()
            .unwrap()
            .split(".")
            .next()
            .unwrap()
            .to_case(Case::Pascal);

        enum_ += &format!(
            "
    {},",
            enum_entry
        );

        into_rgb += &format!(
            "
            Blocks::{} => Rgb::new({}., {}., {}.),",
            enum_entry, avg.0, avg.1, avg.2
        );

        asref_path += &format!(
            "
            Blocks::{} => Path::new(\"{}.png\"),",
            enum_entry,
            enum_entry.to_case(Case::Snake)
        )
    }

    let mut file = fs::File::create("./src/average.rs")?;
    file.write_all(
        format!(
            "//! This file is generated by build.rs, do not edit it manually
use color_space::Rgb;
use strum::EnumIter;
use std::path::Path;

{enum_}
}}

{into_rgb}
        }}
    }}
}}

{asref_path}
        }}
    }}
}}"
        )
        .as_bytes(),
    )?;
    drop(file);

    Ok(())
}
